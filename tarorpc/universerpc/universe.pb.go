// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: universerpc/universe.proto

package universerpc

import (
	tarorpc "github.com/lightninglabs/taro/tarorpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UniverseSyncMode int32

const (
	// A sync node that indicates that only new asset creation (minting) proofs
	// should be synced.
	UniverseSyncMode_SYNC_ISSUANCE_ONLY UniverseSyncMode = 0
	// A syncing mode that indicates that all asset proofs should be synced.
	// This includes normal transfers as well.
	UniverseSyncMode_SYNC_FULL UniverseSyncMode = 1
)

// Enum value maps for UniverseSyncMode.
var (
	UniverseSyncMode_name = map[int32]string{
		0: "SYNC_ISSUANCE_ONLY",
		1: "SYNC_FULL",
	}
	UniverseSyncMode_value = map[string]int32{
		"SYNC_ISSUANCE_ONLY": 0,
		"SYNC_FULL":          1,
	}
)

func (x UniverseSyncMode) Enum() *UniverseSyncMode {
	p := new(UniverseSyncMode)
	*p = x
	return p
}

func (x UniverseSyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UniverseSyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_universerpc_universe_proto_enumTypes[0].Descriptor()
}

func (UniverseSyncMode) Type() protoreflect.EnumType {
	return &file_universerpc_universe_proto_enumTypes[0]
}

func (x UniverseSyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UniverseSyncMode.Descriptor instead.
func (UniverseSyncMode) EnumDescriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{0}
}

type AssetRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetRootRequest) Reset() {
	*x = AssetRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootRequest) ProtoMessage() {}

func (x *AssetRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootRequest.ProtoReflect.Descriptor instead.
func (*AssetRootRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{0}
}

type MerkleSumNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MS-SMT root hash for the branch node.
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// The root sum of the branch node. This is hashed to create the root_hash
	// along with the left and right siblings. This value represents the total
	// known supply of the asset.
	RootSum int64 `protobuf:"varint,2,opt,name=root_sum,json=rootSum,proto3" json:"root_sum,omitempty"`
}

func (x *MerkleSumNode) Reset() {
	*x = MerkleSumNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleSumNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleSumNode) ProtoMessage() {}

func (x *MerkleSumNode) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleSumNode.ProtoReflect.Descriptor instead.
func (*MerkleSumNode) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{1}
}

func (x *MerkleSumNode) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *MerkleSumNode) GetRootSum() int64 {
	if x != nil {
		return x.RootSum
	}
	return 0
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*ID_AssetId
	//	*ID_AssetIdStr
	//	*ID_GroupKey
	//	*ID_GroupKeyStr
	Id isID_Id `protobuf_oneof:"id"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{2}
}

func (m *ID) GetId() isID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ID) GetAssetId() []byte {
	if x, ok := x.GetId().(*ID_AssetId); ok {
		return x.AssetId
	}
	return nil
}

func (x *ID) GetAssetIdStr() string {
	if x, ok := x.GetId().(*ID_AssetIdStr); ok {
		return x.AssetIdStr
	}
	return ""
}

func (x *ID) GetGroupKey() []byte {
	if x, ok := x.GetId().(*ID_GroupKey); ok {
		return x.GroupKey
	}
	return nil
}

func (x *ID) GetGroupKeyStr() string {
	if x, ok := x.GetId().(*ID_GroupKeyStr); ok {
		return x.GroupKeyStr
	}
	return ""
}

type isID_Id interface {
	isID_Id()
}

type ID_AssetId struct {
	// The 32-byte asset ID.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ID_AssetIdStr struct {
	// The 32-byte asset ID encoded as a hex string.
	AssetIdStr string `protobuf:"bytes,2,opt,name=asset_id_str,json=assetIdStr,proto3,oneof"`
}

type ID_GroupKey struct {
	// The 32-byte asset group key.
	GroupKey []byte `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3,oneof"`
}

type ID_GroupKeyStr struct {
	// The 32-byte asset group key encoded as hex string.
	GroupKeyStr string `protobuf:"bytes,4,opt,name=group_key_str,json=groupKeyStr,proto3,oneof"`
}

func (*ID_AssetId) isID_Id() {}

func (*ID_AssetIdStr) isID_Id() {}

func (*ID_GroupKey) isID_Id() {}

func (*ID_GroupKeyStr) isID_Id() {}

type UniverseRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The merkle sum sparse merkle tree root associated with the above
	// universe ID.
	MssmtRoot *MerkleSumNode `protobuf:"bytes,3,opt,name=mssmt_root,json=mssmtRoot,proto3" json:"mssmt_root,omitempty"`
}

func (x *UniverseRoot) Reset() {
	*x = UniverseRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseRoot) ProtoMessage() {}

func (x *UniverseRoot) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseRoot.ProtoReflect.Descriptor instead.
func (*UniverseRoot) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{3}
}

func (x *UniverseRoot) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UniverseRoot) GetMssmtRoot() *MerkleSumNode {
	if x != nil {
		return x.MssmtRoot
	}
	return nil
}

type AssetRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of the set of known universe roots for each asset. The key in the
	// map is the 32-byte asset_id or group key hash.
	UniverseRoots map[string]*UniverseRoot `protobuf:"bytes,1,rep,name=universe_roots,json=universeRoots,proto3" json:"universe_roots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AssetRootResponse) Reset() {
	*x = AssetRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootResponse) ProtoMessage() {}

func (x *AssetRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootResponse.ProtoReflect.Descriptor instead.
func (*AssetRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{4}
}

func (x *AssetRootResponse) GetUniverseRoots() map[string]*UniverseRoot {
	if x != nil {
		return x.UniverseRoots
	}
	return nil
}

type AssetRootQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID value to uniquely identify a Universe root.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AssetRootQuery) Reset() {
	*x = AssetRootQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRootQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRootQuery) ProtoMessage() {}

func (x *AssetRootQuery) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRootQuery.ProtoReflect.Descriptor instead.
func (*AssetRootQuery) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{5}
}

func (x *AssetRootQuery) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueryRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset root for the given asset ID or group key.
	AssetRoot *UniverseRoot `protobuf:"bytes,1,opt,name=asset_root,json=assetRoot,proto3" json:"asset_root,omitempty"`
}

func (x *QueryRootResponse) Reset() {
	*x = QueryRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRootResponse) ProtoMessage() {}

func (x *QueryRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRootResponse.ProtoReflect.Descriptor instead.
func (*QueryRootResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{6}
}

func (x *QueryRootResponse) GetAssetRoot() *UniverseRoot {
	if x != nil {
		return x.AssetRoot
	}
	return nil
}

type Outpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output as a hex encoded (and reversed!) string.
	HashStr string `protobuf:"bytes,1,opt,name=hash_str,json=hashStr,proto3" json:"hash_str,omitempty"`
	// The index of the output.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{7}
}

func (x *Outpoint) GetHashStr() string {
	if x != nil {
		return x.HashStr
	}
	return ""
}

func (x *Outpoint) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AssetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the asset key, either as a single hex encoded string, or
	// an unrolled outpoint.
	//
	// Types that are assignable to Outpoint:
	//	*AssetKey_OpStr
	//	*AssetKey_Op
	Outpoint isAssetKey_Outpoint `protobuf_oneof:"outpoint"`
	// The script key of the asset.
	//
	// Types that are assignable to ScriptKey:
	//	*AssetKey_ScriptKeyBytes
	//	*AssetKey_ScriptKeyStr
	ScriptKey isAssetKey_ScriptKey `protobuf_oneof:"script_key"`
}

func (x *AssetKey) Reset() {
	*x = AssetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetKey) ProtoMessage() {}

func (x *AssetKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetKey.ProtoReflect.Descriptor instead.
func (*AssetKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{8}
}

func (m *AssetKey) GetOutpoint() isAssetKey_Outpoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (x *AssetKey) GetOpStr() string {
	if x, ok := x.GetOutpoint().(*AssetKey_OpStr); ok {
		return x.OpStr
	}
	return ""
}

func (x *AssetKey) GetOp() *Outpoint {
	if x, ok := x.GetOutpoint().(*AssetKey_Op); ok {
		return x.Op
	}
	return nil
}

func (m *AssetKey) GetScriptKey() isAssetKey_ScriptKey {
	if m != nil {
		return m.ScriptKey
	}
	return nil
}

func (x *AssetKey) GetScriptKeyBytes() []byte {
	if x, ok := x.GetScriptKey().(*AssetKey_ScriptKeyBytes); ok {
		return x.ScriptKeyBytes
	}
	return nil
}

func (x *AssetKey) GetScriptKeyStr() string {
	if x, ok := x.GetScriptKey().(*AssetKey_ScriptKeyStr); ok {
		return x.ScriptKeyStr
	}
	return ""
}

type isAssetKey_Outpoint interface {
	isAssetKey_Outpoint()
}

type AssetKey_OpStr struct {
	OpStr string `protobuf:"bytes,1,opt,name=op_str,json=opStr,proto3,oneof"`
}

type AssetKey_Op struct {
	Op *Outpoint `protobuf:"bytes,2,opt,name=op,proto3,oneof"`
}

func (*AssetKey_OpStr) isAssetKey_Outpoint() {}

func (*AssetKey_Op) isAssetKey_Outpoint() {}

type isAssetKey_ScriptKey interface {
	isAssetKey_ScriptKey()
}

type AssetKey_ScriptKeyBytes struct {
	ScriptKeyBytes []byte `protobuf:"bytes,3,opt,name=script_key_bytes,json=scriptKeyBytes,proto3,oneof"`
}

type AssetKey_ScriptKeyStr struct {
	ScriptKeyStr string `protobuf:"bytes,4,opt,name=script_key_str,json=scriptKeyStr,proto3,oneof"`
}

func (*AssetKey_ScriptKeyBytes) isAssetKey_ScriptKey() {}

func (*AssetKey_ScriptKeyStr) isAssetKey_ScriptKey() {}

type AssetLeafKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of asset leaf keys for the given asset ID or group key.
	AssetKeys []*AssetKey `protobuf:"bytes,1,rep,name=asset_keys,json=assetKeys,proto3" json:"asset_keys,omitempty"`
}

func (x *AssetLeafKeyResponse) Reset() {
	*x = AssetLeafKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafKeyResponse) ProtoMessage() {}

func (x *AssetLeafKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafKeyResponse.ProtoReflect.Descriptor instead.
func (*AssetLeafKeyResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{9}
}

func (x *AssetLeafKeyResponse) GetAssetKeys() []*AssetKey {
	if x != nil {
		return x.AssetKeys
	}
	return nil
}

type AssetLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset included in the leaf.
	Asset *tarorpc.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// The asset issuance proof, which proves that the asset specified above
	// was issued properly.
	IssuanceProof []byte `protobuf:"bytes,2,opt,name=issuance_proof,json=issuanceProof,proto3" json:"issuance_proof,omitempty"`
}

func (x *AssetLeaf) Reset() {
	*x = AssetLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeaf) ProtoMessage() {}

func (x *AssetLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeaf.ProtoReflect.Descriptor instead.
func (*AssetLeaf) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{10}
}

func (x *AssetLeaf) GetAsset() *tarorpc.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *AssetLeaf) GetIssuanceProof() []byte {
	if x != nil {
		return x.IssuanceProof
	}
	return nil
}

type AssetLeafResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of asset leaves for the given asset ID or group key.
	Leaves []*AssetLeaf `protobuf:"bytes,1,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *AssetLeafResponse) Reset() {
	*x = AssetLeafResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLeafResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLeafResponse) ProtoMessage() {}

func (x *AssetLeafResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLeafResponse.ProtoReflect.Descriptor instead.
func (*AssetLeafResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{11}
}

func (x *AssetLeafResponse) GetLeaves() []*AssetLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type UniverseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to query for.
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The asset key to query for.
	LeafKey *AssetKey `protobuf:"bytes,2,opt,name=leaf_key,json=leafKey,proto3" json:"leaf_key,omitempty"`
}

func (x *UniverseKey) Reset() {
	*x = UniverseKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseKey) ProtoMessage() {}

func (x *UniverseKey) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseKey.ProtoReflect.Descriptor instead.
func (*UniverseKey) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{12}
}

func (x *UniverseKey) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UniverseKey) GetLeafKey() *AssetKey {
	if x != nil {
		return x.LeafKey
	}
	return nil
}

type IssuanceProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request original request for the issuance proof.
	Req *UniverseKey `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	// The Universe root that includes this asset leaf.
	UniverseRoot *UniverseRoot `protobuf:"bytes,2,opt,name=universe_root,json=universeRoot,proto3" json:"universe_root,omitempty"`
	// An inclusion proof for the asset leaf included below. The value is that
	// issuance proof itself, with a sum value of the amount of the asset.
	UniverseInclusionProof []byte `protobuf:"bytes,3,opt,name=universe_inclusion_proof,json=universeInclusionProof,proto3" json:"universe_inclusion_proof,omitempty"`
	// The asset leaf itself, which includes the asset and the issuance proof.
	AssetLeaf *AssetLeaf `protobuf:"bytes,4,opt,name=asset_leaf,json=assetLeaf,proto3" json:"asset_leaf,omitempty"`
}

func (x *IssuanceProofResponse) Reset() {
	*x = IssuanceProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuanceProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceProofResponse) ProtoMessage() {}

func (x *IssuanceProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceProofResponse.ProtoReflect.Descriptor instead.
func (*IssuanceProofResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{13}
}

func (x *IssuanceProofResponse) GetReq() *UniverseKey {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *IssuanceProofResponse) GetUniverseRoot() *UniverseRoot {
	if x != nil {
		return x.UniverseRoot
	}
	return nil
}

func (x *IssuanceProofResponse) GetUniverseInclusionProof() []byte {
	if x != nil {
		return x.UniverseInclusionProof
	}
	return nil
}

func (x *IssuanceProofResponse) GetAssetLeaf() *AssetLeaf {
	if x != nil {
		return x.AssetLeaf
	}
	return nil
}

type IssuanceProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the asset to insert the proof for.
	Key *UniverseKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The asset leaf to insert into the Universe tree.
	AssetLeaf *AssetLeaf `protobuf:"bytes,4,opt,name=asset_leaf,json=assetLeaf,proto3" json:"asset_leaf,omitempty"`
}

func (x *IssuanceProof) Reset() {
	*x = IssuanceProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuanceProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceProof) ProtoMessage() {}

func (x *IssuanceProof) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceProof.ProtoReflect.Descriptor instead.
func (*IssuanceProof) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{14}
}

func (x *IssuanceProof) GetKey() *UniverseKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IssuanceProof) GetAssetLeaf() *AssetLeaf {
	if x != nil {
		return x.AssetLeaf
	}
	return nil
}

type SyncTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SyncTarget) Reset() {
	*x = SyncTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTarget) ProtoMessage() {}

func (x *SyncTarget) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTarget.ProtoReflect.Descriptor instead.
func (*SyncTarget) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{15}
}

func (x *SyncTarget) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(roasbeef): accept connection type? so can pass along self-signed
	// cert, also brontide based RPC handshake
	UniverseHost string `protobuf:"bytes,1,opt,name=universe_host,json=universeHost,proto3" json:"universe_host,omitempty"`
	// The sync mode. This determines what type of proofs are synced.
	SyncMode UniverseSyncMode `protobuf:"varint,2,opt,name=sync_mode,json=syncMode,proto3,enum=universerpc.UniverseSyncMode" json:"sync_mode,omitempty"`
	// The set of assets to sync. If none are specified, then all assets are
	// synced.
	SyncTargets []*SyncTarget `protobuf:"bytes,3,rep,name=sync_targets,json=syncTargets,proto3" json:"sync_targets,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{16}
}

func (x *SyncRequest) GetUniverseHost() string {
	if x != nil {
		return x.UniverseHost
	}
	return ""
}

func (x *SyncRequest) GetSyncMode() UniverseSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return UniverseSyncMode_SYNC_ISSUANCE_ONLY
}

func (x *SyncRequest) GetSyncTargets() []*SyncTarget {
	if x != nil {
		return x.SyncTargets
	}
	return nil
}

type SyncedUniverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old Universe root for the synced asset.
	OldAssetRoot *UniverseRoot `protobuf:"bytes,1,opt,name=old_asset_root,json=oldAssetRoot,proto3" json:"old_asset_root,omitempty"`
	// The new Universe root for the synced asset.
	NewAssetRoot *UniverseRoot `protobuf:"bytes,2,opt,name=new_asset_root,json=newAssetRoot,proto3" json:"new_asset_root,omitempty"`
	// The set of new asset leaves that were synced.
	NewAssetLeaves []*AssetLeaf `protobuf:"bytes,3,rep,name=new_asset_leaves,json=newAssetLeaves,proto3" json:"new_asset_leaves,omitempty"`
}

func (x *SyncedUniverse) Reset() {
	*x = SyncedUniverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncedUniverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncedUniverse) ProtoMessage() {}

func (x *SyncedUniverse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncedUniverse.ProtoReflect.Descriptor instead.
func (*SyncedUniverse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{17}
}

func (x *SyncedUniverse) GetOldAssetRoot() *UniverseRoot {
	if x != nil {
		return x.OldAssetRoot
	}
	return nil
}

func (x *SyncedUniverse) GetNewAssetRoot() *UniverseRoot {
	if x != nil {
		return x.NewAssetRoot
	}
	return nil
}

func (x *SyncedUniverse) GetNewAssetLeaves() []*AssetLeaf {
	if x != nil {
		return x.NewAssetLeaves
	}
	return nil
}

type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of synced asset Universes.
	SyncedUniverses []*SyncedUniverse `protobuf:"bytes,1,rep,name=synced_universes,json=syncedUniverses,proto3" json:"synced_universes,omitempty"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universerpc_universe_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_universerpc_universe_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_universerpc_universe_proto_rawDescGZIP(), []int{18}
}

func (x *SyncResponse) GetSyncedUniverses() []*SyncedUniverse {
	if x != nil {
		return x.SyncedUniverses
	}
	return nil
}

var File_universerpc_universe_proto protoreflect.FileDescriptor

var file_universerpc_universe_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x1a, 0x0a, 0x74, 0x61, 0x72, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0d, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x53,
	0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42,
	0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x73, 0x73, 0x6d, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53,
	0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6d, 0x73, 0x73, 0x6d, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x73, 0x1a, 0x5b, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31,
	0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0x3b, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x68, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xba, 0x01,
	0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x6f, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x70,
	0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x14, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x58, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x15, 0x49, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12,
	0x3e, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x16, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66,
	0x22, 0x72, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x66, 0x22, 0x2d, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x0f,
	0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x2a,
	0x39, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x32, 0x9c, 0x04, 0x0a, 0x08, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x66, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_universerpc_universe_proto_rawDescOnce sync.Once
	file_universerpc_universe_proto_rawDescData = file_universerpc_universe_proto_rawDesc
)

func file_universerpc_universe_proto_rawDescGZIP() []byte {
	file_universerpc_universe_proto_rawDescOnce.Do(func() {
		file_universerpc_universe_proto_rawDescData = protoimpl.X.CompressGZIP(file_universerpc_universe_proto_rawDescData)
	})
	return file_universerpc_universe_proto_rawDescData
}

var file_universerpc_universe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_universerpc_universe_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_universerpc_universe_proto_goTypes = []interface{}{
	(UniverseSyncMode)(0),         // 0: universerpc.UniverseSyncMode
	(*AssetRootRequest)(nil),      // 1: universerpc.AssetRootRequest
	(*MerkleSumNode)(nil),         // 2: universerpc.MerkleSumNode
	(*ID)(nil),                    // 3: universerpc.ID
	(*UniverseRoot)(nil),          // 4: universerpc.UniverseRoot
	(*AssetRootResponse)(nil),     // 5: universerpc.AssetRootResponse
	(*AssetRootQuery)(nil),        // 6: universerpc.AssetRootQuery
	(*QueryRootResponse)(nil),     // 7: universerpc.QueryRootResponse
	(*Outpoint)(nil),              // 8: universerpc.Outpoint
	(*AssetKey)(nil),              // 9: universerpc.AssetKey
	(*AssetLeafKeyResponse)(nil),  // 10: universerpc.AssetLeafKeyResponse
	(*AssetLeaf)(nil),             // 11: universerpc.AssetLeaf
	(*AssetLeafResponse)(nil),     // 12: universerpc.AssetLeafResponse
	(*UniverseKey)(nil),           // 13: universerpc.UniverseKey
	(*IssuanceProofResponse)(nil), // 14: universerpc.IssuanceProofResponse
	(*IssuanceProof)(nil),         // 15: universerpc.IssuanceProof
	(*SyncTarget)(nil),            // 16: universerpc.SyncTarget
	(*SyncRequest)(nil),           // 17: universerpc.SyncRequest
	(*SyncedUniverse)(nil),        // 18: universerpc.SyncedUniverse
	(*SyncResponse)(nil),          // 19: universerpc.SyncResponse
	nil,                           // 20: universerpc.AssetRootResponse.UniverseRootsEntry
	(*tarorpc.Asset)(nil),         // 21: tarorpc.Asset
}
var file_universerpc_universe_proto_depIdxs = []int32{
	3,  // 0: universerpc.UniverseRoot.id:type_name -> universerpc.ID
	2,  // 1: universerpc.UniverseRoot.mssmt_root:type_name -> universerpc.MerkleSumNode
	20, // 2: universerpc.AssetRootResponse.universe_roots:type_name -> universerpc.AssetRootResponse.UniverseRootsEntry
	3,  // 3: universerpc.AssetRootQuery.id:type_name -> universerpc.ID
	4,  // 4: universerpc.QueryRootResponse.asset_root:type_name -> universerpc.UniverseRoot
	8,  // 5: universerpc.AssetKey.op:type_name -> universerpc.Outpoint
	9,  // 6: universerpc.AssetLeafKeyResponse.asset_keys:type_name -> universerpc.AssetKey
	21, // 7: universerpc.AssetLeaf.asset:type_name -> tarorpc.Asset
	11, // 8: universerpc.AssetLeafResponse.leaves:type_name -> universerpc.AssetLeaf
	3,  // 9: universerpc.UniverseKey.id:type_name -> universerpc.ID
	9,  // 10: universerpc.UniverseKey.leaf_key:type_name -> universerpc.AssetKey
	13, // 11: universerpc.IssuanceProofResponse.req:type_name -> universerpc.UniverseKey
	4,  // 12: universerpc.IssuanceProofResponse.universe_root:type_name -> universerpc.UniverseRoot
	11, // 13: universerpc.IssuanceProofResponse.asset_leaf:type_name -> universerpc.AssetLeaf
	13, // 14: universerpc.IssuanceProof.key:type_name -> universerpc.UniverseKey
	11, // 15: universerpc.IssuanceProof.asset_leaf:type_name -> universerpc.AssetLeaf
	3,  // 16: universerpc.SyncTarget.id:type_name -> universerpc.ID
	0,  // 17: universerpc.SyncRequest.sync_mode:type_name -> universerpc.UniverseSyncMode
	16, // 18: universerpc.SyncRequest.sync_targets:type_name -> universerpc.SyncTarget
	4,  // 19: universerpc.SyncedUniverse.old_asset_root:type_name -> universerpc.UniverseRoot
	4,  // 20: universerpc.SyncedUniverse.new_asset_root:type_name -> universerpc.UniverseRoot
	11, // 21: universerpc.SyncedUniverse.new_asset_leaves:type_name -> universerpc.AssetLeaf
	18, // 22: universerpc.SyncResponse.synced_universes:type_name -> universerpc.SyncedUniverse
	4,  // 23: universerpc.AssetRootResponse.UniverseRootsEntry.value:type_name -> universerpc.UniverseRoot
	1,  // 24: universerpc.Universe.AssetRoots:input_type -> universerpc.AssetRootRequest
	6,  // 25: universerpc.Universe.QueryAssetRoots:input_type -> universerpc.AssetRootQuery
	3,  // 26: universerpc.Universe.AssetLeafKeys:input_type -> universerpc.ID
	3,  // 27: universerpc.Universe.AssetLeaves:input_type -> universerpc.ID
	13, // 28: universerpc.Universe.QueryIssuanceProof:input_type -> universerpc.UniverseKey
	15, // 29: universerpc.Universe.InsertIssuanceProof:input_type -> universerpc.IssuanceProof
	17, // 30: universerpc.Universe.SyncUniverse:input_type -> universerpc.SyncRequest
	5,  // 31: universerpc.Universe.AssetRoots:output_type -> universerpc.AssetRootResponse
	7,  // 32: universerpc.Universe.QueryAssetRoots:output_type -> universerpc.QueryRootResponse
	10, // 33: universerpc.Universe.AssetLeafKeys:output_type -> universerpc.AssetLeafKeyResponse
	12, // 34: universerpc.Universe.AssetLeaves:output_type -> universerpc.AssetLeafResponse
	14, // 35: universerpc.Universe.QueryIssuanceProof:output_type -> universerpc.IssuanceProofResponse
	14, // 36: universerpc.Universe.InsertIssuanceProof:output_type -> universerpc.IssuanceProofResponse
	19, // 37: universerpc.Universe.SyncUniverse:output_type -> universerpc.SyncResponse
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_universerpc_universe_proto_init() }
func file_universerpc_universe_proto_init() {
	if File_universerpc_universe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_universerpc_universe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleSumNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniverseRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRootQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLeafKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLeafResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniverseKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuanceProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuanceProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncedUniverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universerpc_universe_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_universerpc_universe_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ID_AssetId)(nil),
		(*ID_AssetIdStr)(nil),
		(*ID_GroupKey)(nil),
		(*ID_GroupKeyStr)(nil),
	}
	file_universerpc_universe_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AssetKey_OpStr)(nil),
		(*AssetKey_Op)(nil),
		(*AssetKey_ScriptKeyBytes)(nil),
		(*AssetKey_ScriptKeyStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_universerpc_universe_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_universerpc_universe_proto_goTypes,
		DependencyIndexes: file_universerpc_universe_proto_depIdxs,
		EnumInfos:         file_universerpc_universe_proto_enumTypes,
		MessageInfos:      file_universerpc_universe_proto_msgTypes,
	}.Build()
	File_universerpc_universe_proto = out.File
	file_universerpc_universe_proto_rawDesc = nil
	file_universerpc_universe_proto_goTypes = nil
	file_universerpc_universe_proto_depIdxs = nil
}
